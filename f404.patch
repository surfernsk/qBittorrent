From eb887139fd32ec192379f53fbc443db5b292fbfc Mon Sep 17 00:00:00 2001
From: sledgehammer999 <hammered999@gmail.com>
Date: Mon, 4 Dec 2017 01:56:00 +0200
Subject: [PATCH] =?UTF-8?q?=EF=BB=BFFix=20application=20of=20speed=20limit?=
 =?UTF-8?q?s=20on=20LAN=20and=20=CE=BCTP=20connections.=20Closes=20#7745.?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

---
 src/base/bittorrent/session.cpp | 10 +++-------
 1 file changed, 3 insertions(+), 7 deletions(-)

diff --git a/src/base/bittorrent/session.cpp b/src/base/bittorrent/session.cpp
index 7bd8306b49..707761ff21 100644
--- a/src/base/bittorrent/session.cpp
+++ b/src/base/bittorrent/session.cpp
@@ -1481,14 +1481,10 @@ void Session::configurePeerClasses()
     peerClassTypeFilter.add(libt::peer_class_type_filter::tcp_socket, libt::session::tcp_peer_class_id);
     peerClassTypeFilter.add(libt::peer_class_type_filter::ssl_tcp_socket, libt::session::tcp_peer_class_id);
     peerClassTypeFilter.add(libt::peer_class_type_filter::i2p_socket, libt::session::tcp_peer_class_id);
-    if (isUTPRateLimited()) {
-        peerClassTypeFilter.add(libt::peer_class_type_filter::utp_socket
-            , libt::session::local_peer_class_id);
-        peerClassTypeFilter.add(libt::peer_class_type_filter::utp_socket
+    if (!isUTPRateLimited()) {
+        peerClassTypeFilter.disallow(libt::peer_class_type_filter::utp_socket
             , libt::session::global_peer_class_id);
-        peerClassTypeFilter.add(libt::peer_class_type_filter::ssl_utp_socket
-            , libt::session::local_peer_class_id);
-        peerClassTypeFilter.add(libt::peer_class_type_filter::ssl_utp_socket
+        peerClassTypeFilter.disallow(libt::peer_class_type_filter::ssl_utp_socket
             , libt::session::global_peer_class_id);
     }
     m_nativeSession->set_peer_class_type_filter(peerClassTypeFilter);

From 02ae1e37343e9ec51b885c492c9a1bdc54d1bdf3 Mon Sep 17 00:00:00 2001
From: thalieht <yjapysgr@sharklasers.com>
Date: Mon, 18 Dec 2017 12:52:03 +0200
Subject: [PATCH] Make peer information flags in peerlist more readable

---
 src/base/bittorrent/peerinfo.cpp | 66 ++++++++++++++++++++--------------------
 1 file changed, 33 insertions(+), 33 deletions(-)

diff --git a/src/base/bittorrent/peerinfo.cpp b/src/base/bittorrent/peerinfo.cpp
index 91ffd225fb..92d12cbc20 100644
--- a/src/base/bittorrent/peerinfo.cpp
+++ b/src/base/bittorrent/peerinfo.cpp
@@ -273,18 +273,20 @@ qreal PeerInfo::relevance() const
 
 void PeerInfo::determineFlags()
 {
+    QStringList flagsDescriptionList;
+
     if (isInteresting()) {
         // d = Your client wants to download, but peer doesn't want to send (interested and choked)
         if (isRemoteChocked()) {
             m_flags += "d ";
-            m_flagsDescription += tr("interested(local) and choked(peer)");
-            m_flagsDescription += ", ";
+            flagsDescriptionList += "d = "
+                    + tr("Interested(local) and Choked(peer)");
         }
         else {
             // D = Currently downloading (interested and not choked)
             m_flags += "D ";
-            m_flagsDescription += tr("interested(local) and unchoked(peer)");
-            m_flagsDescription += ", ";
+            flagsDescriptionList += "D = "
+                    + tr("interested(local) and unchoked(peer)");
         }
     }
 
@@ -292,97 +294,95 @@ void PeerInfo::determineFlags()
         // u = Peer wants your client to upload, but your client doesn't want to (interested and choked)
         if (isChocked()) {
             m_flags += "u ";
-            m_flagsDescription += tr("interested(peer) and choked(local)");
-            m_flagsDescription += ", ";
+            flagsDescriptionList += "u = "
+                    + tr("interested(peer) and choked(local)");
         }
         else {
             // U = Currently uploading (interested and not choked)
             m_flags += "U ";
-            m_flagsDescription += tr("interested(peer) and unchoked(local)");
-            m_flagsDescription += ", ";
+            flagsDescriptionList += "U = "
+                    + tr("interested(peer) and unchoked(local)");
         }
     }
 
     // O = Optimistic unchoke
     if (optimisticUnchoke()) {
         m_flags += "O ";
-        m_flagsDescription += tr("optimistic unchoke");
-        m_flagsDescription += ", ";
+        flagsDescriptionList += "O = "
+                + tr("optimistic unchoke");
     }
 
     // S = Peer is snubbed
     if (isSnubbed()) {
         m_flags += "S ";
-        m_flagsDescription += tr("peer snubbed");
-        m_flagsDescription += ", ";
+        flagsDescriptionList += "S = "
+                + tr("peer snubbed");
     }
 
     // I = Peer is an incoming connection
     if (!isLocalConnection()) {
         m_flags += "I ";
-        m_flagsDescription += tr("incoming connection");
-        m_flagsDescription += ", ";
+        flagsDescriptionList += "I = "
+                + tr("incoming connection");
     }
 
     // K = Peer is unchoking your client, but your client is not interested
     if (!isRemoteChocked() && !isInteresting()) {
         m_flags += "K ";
-        m_flagsDescription += tr("not interested(local) and unchoked(peer)");
-        m_flagsDescription += ", ";
+        flagsDescriptionList += "K = "
+                + tr("not interested(local) and unchoked(peer)");
     }
 
     // ? = Your client unchoked the peer but the peer is not interested
     if (!isChocked() && !isRemoteInterested()) {
         m_flags += "? ";
-        m_flagsDescription += tr("not interested(peer) and unchoked(local)");
-        m_flagsDescription += ", ";
+        flagsDescriptionList += "? = "
+                + tr("not interested(peer) and unchoked(local)");
     }
 
     // X = Peer was included in peerlists obtained through Peer Exchange (PEX)
     if (fromPeX()) {
         m_flags += "X ";
-        m_flagsDescription += tr("peer from PEX");
-        m_flagsDescription += ", ";
+        flagsDescriptionList += "X = "
+                + tr("peer from PEX");
     }
 
     // H = Peer was obtained through DHT
     if (fromDHT()) {
         m_flags += "H ";
-        m_flagsDescription += tr("peer from DHT");
-        m_flagsDescription += ", ";
+        flagsDescriptionList += "H = "
+                + tr("peer from DHT");
     }
 
     // E = Peer is using Protocol Encryption (all traffic)
     if (isRC4Encrypted()) {
         m_flags += "E ";
-        m_flagsDescription += tr("encrypted traffic");
-        m_flagsDescription += ", ";
+        flagsDescriptionList += "E = "
+                + tr("encrypted traffic");
     }
 
     // e = Peer is using Protocol Encryption (handshake)
     if (isPlaintextEncrypted()) {
         m_flags += "e ";
-        m_flagsDescription += tr("encrypted handshake");
-        m_flagsDescription += ", ";
+        flagsDescriptionList += "e = "
+                + tr("encrypted handshake");
     }
 
     // P = Peer is using uTorrent uTP
     if (useUTPSocket()) {
         m_flags += "P ";
-        m_flagsDescription += QString::fromUtf8(C_UTP);
-        m_flagsDescription += ", ";
+        flagsDescriptionList += "P = "
+                + QString::fromUtf8(C_UTP);
     }
 
     // L = Peer is local
     if (fromLSD()) {
         m_flags += "L";
-        m_flagsDescription += tr("peer from LSD");
+        flagsDescriptionList += "L = "
+                + tr("peer from LSD");
     }
-
     m_flags = m_flags.trimmed();
-    m_flagsDescription = m_flagsDescription.trimmed();
-    if (m_flagsDescription.endsWith(',', Qt::CaseInsensitive))
-        m_flagsDescription.chop(1);
+    m_flagsDescription = flagsDescriptionList.join('\n');
 }
 
 QString PeerInfo::flags() const

From 52401bd2b0e1ccb5436d6d0885e6dae691ee2fdd Mon Sep 17 00:00:00 2001
From: sledgehammer999 <hammered999@gmail.com>
Date: Thu, 21 Dec 2017 02:49:29 +0200
Subject: [PATCH] Fix sorting of country flags column in Peers tab.

---
 src/gui/properties/peerlistsortmodel.h | 12 +++---------
 1 file changed, 3 insertions(+), 9 deletions(-)

diff --git a/src/gui/properties/peerlistsortmodel.h b/src/gui/properties/peerlistsortmodel.h
index 451749b2c0..83c4f715e0 100644
--- a/src/gui/properties/peerlistsortmodel.h
+++ b/src/gui/properties/peerlistsortmodel.h
@@ -53,17 +53,11 @@ class PeerListSortModel : public QSortFilterProxyModel
                 const QString strL = left.data().toString();
                 const QString strR = right.data().toString();
                 const int result = Utils::String::naturalCompare(strL, strR, Qt::CaseInsensitive);
-                if (result != 0)
-                    return (result < 0);
-
-                return (left < right);
-            }
+                return (result < 0);
+        }
             break;
         default:
-            if (left.data() != right.data())
-                return QSortFilterProxyModel::lessThan(left, right);
-
-            return (left < right);
+            return QSortFilterProxyModel::lessThan(left, right);
         };
     }
 };

From 84805f7fb8995342fbc62f5cf3d1277a3ca7c2f4 Mon Sep 17 00:00:00 2001
From: sledgehammer999 <hammered999@gmail.com>
Date: Thu, 21 Dec 2017 15:01:13 +0200
Subject: [PATCH] Fix natural sorting when the common part of 2 strings ends
 partially in a number which continues in the uncommon part. Closes #8080
 #6732.

---
 src/base/utils/string.cpp | 5 ++++-
 1 file changed, 4 insertions(+), 1 deletion(-)

diff --git a/src/base/utils/string.cpp b/src/base/utils/string.cpp
index a7a58edf5b..c2a592b9ce 100644
--- a/src/base/utils/string.cpp
+++ b/src/base/utils/string.cpp
@@ -85,7 +85,10 @@ namespace
 
                 const QChar leftChar = (m_caseSensitivity == Qt::CaseSensitive) ? left[posL] : left[posL].toLower();
                 const QChar rightChar = (m_caseSensitivity == Qt::CaseSensitive) ? right[posR] : right[posR].toLower();
-                if (leftChar == rightChar) {
+                // Compare only non-digits.
+                // Numbers should be compared as a whole
+                // otherwise the string->int conversion can yield a wrong value
+                if ((leftChar == rightChar) && !leftChar.isDigit()) {
                     // compare next character
                     ++posL;
                     ++posR;

From 2719131ed22674f10e096da181b4126d1542ddbb Mon Sep 17 00:00:00 2001
From: sledgehammer999 <hammered999@gmail.com>
Date: Thu, 21 Dec 2017 15:26:28 +0200
Subject: [PATCH] Simplify sorting code.

---
 src/gui/categoryfilterproxymodel.cpp |  4 +---
 src/gui/search/searchsortmodel.cpp   | 12 +++---------
 src/gui/tagfilterproxymodel.cpp      |  5 +----
 src/gui/transferlistsortmodel.cpp    |  5 +----
 4 files changed, 6 insertions(+), 20 deletions(-)

diff --git a/src/gui/categoryfilterproxymodel.cpp b/src/gui/categoryfilterproxymodel.cpp
index 9c7a724b7d..d9ba958ca0 100644
--- a/src/gui/categoryfilterproxymodel.cpp
+++ b/src/gui/categoryfilterproxymodel.cpp
@@ -54,8 +54,6 @@ bool CategoryFilterProxyModel::lessThan(const QModelIndex &left, const QModelInd
 
     int result = Utils::String::naturalCompare(left.data().toString(), right.data().toString()
         , Qt::CaseInsensitive);
-    if (result != 0)
-        return (result < 0);
 
-    return (left < right);
+    return (result < 0);
 }
diff --git a/src/gui/search/searchsortmodel.cpp b/src/gui/search/searchsortmodel.cpp
index 8e5a54cd40..a41be4a68d 100644
--- a/src/gui/search/searchsortmodel.cpp
+++ b/src/gui/search/searchsortmodel.cpp
@@ -113,17 +113,11 @@ bool SearchSortModel::lessThan(const QModelIndex &left, const QModelIndex &right
             const QString strL = left.data().toString();
             const QString strR = right.data().toString();
             const int result = Utils::String::naturalCompare(strL, strR, Qt::CaseInsensitive);
-            if (result != 0)
-                return (result < 0);
-
-            return (left < right);
-        }
+            return (result < 0);
+    }
         break;
     default:
-        if (left.data() != right.data())
-            return base::lessThan(left, right);
-
-        return (left < right);
+        return base::lessThan(left, right);
     };
 }
 
diff --git a/src/gui/tagfilterproxymodel.cpp b/src/gui/tagfilterproxymodel.cpp
index c80d9cfbb8..c73d2e7eca 100644
--- a/src/gui/tagfilterproxymodel.cpp
+++ b/src/gui/tagfilterproxymodel.cpp
@@ -54,8 +54,5 @@ bool TagFilterProxyModel::lessThan(const QModelIndex &left, const QModelIndex &r
 
     int result = Utils::String::naturalCompare(left.data().toString(), right.data().toString()
         , Qt::CaseInsensitive);
-    if (result != 0)
-        return (result < 0);
-
-    return (left < right);
+    return (result < 0);
 }
diff --git a/src/gui/transferlistsortmodel.cpp b/src/gui/transferlistsortmodel.cpp
index 513db5b9d3..e57b35baf6 100644
--- a/src/gui/transferlistsortmodel.cpp
+++ b/src/gui/transferlistsortmodel.cpp
@@ -95,10 +95,7 @@ bool TransferListSortModel::lessThan(const QModelIndex &left, const QModelIndex
             return lowerPositionThan(left, right);
 
         const int result = Utils::String::naturalCompare(vL.toString(), vR.toString(), Qt::CaseInsensitive);
-        if (result != 0)
-            return (result < 0);
-
-        return (left < right);
+        return (result < 0);
     }
 
     case TorrentModel::TR_ADD_DATE:
